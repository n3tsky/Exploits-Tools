# Generic functions
import os
import sys
import struct
import argparse

# Open file (filename), and returns content
def open_file(filename):
    if os.path.isfile(filename):
        with open(filename, "r") as fin:
            return fin.read()
    else:
        print "\n[!] File (%s) doesn't exist\nExiting..." % (filename)
        sys.exit(1)

# Return reversed address
def p(address):
    return struct.pack("<i", address)

def user_choice_int(msg, error_msg, max, min=0):
    while True:
        response = raw_input(msg)
        try:
            response = int(response)
            if (response < min) or (response > max):
                print error_msg
            else:
                return response
        except ValueError:
            print "[!] Enter valid index please"

# Args parser
def parser():
    parser = argparse.ArgumentParser(description="Add a shellcode to an existing PE (x86) or hide the content of a PE", formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('--file', '-f', required=True, help="PE file to work with")
    parser.add_argument('--analyse', required=False, action="store_true", help="Analyse PE file (sections, entry point, etc.)")
    parser.add_argument('--fcc', required=False, action="store_true", help="Find code cave to put shellcode into (technique 1)")
    parser.add_argument('--new-sec', required=False, metavar="", help="Add shellcode into new PE section (technique 2)")
    parser.add_argument('--shellcode', required=False, metavar="FILE", help="Shellcode to be added to PE file (msfvenom type C format), default: new section (technique 1)")
    parser.add_argument('--sh-cc', required=False, action="store_true", help="Use a code-cave to inject shellcode (technique 2)")
    parser.add_argument('--new-sec-name', required=False, metavar="", help="New section name (5 chars max), otherwise will be randomly generated")
    parser.add_argument('--xor', required=False, metavar="FILE", help="XOR section(s)")
    parser.add_argument('--output', required=False, metavar="FILE", help="Output (PE) file")
    parser.add_argument('--verbose', '-v', required=False, action="store_true", help="Verbose")
    parser.add_argument('--test', required=False, action="store_true", help="test")
    return parser.parse_args()
